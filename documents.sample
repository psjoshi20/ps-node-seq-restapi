https://medium.com/crowdbotics/how-to-build-a-rest-api-with-nodejs-and-postgresql-828c7ec1e8b1

path = require('path');

module.exports = {
  "config": path.resolve('./config', 'config.json'),
  "models-path": path.resolve('./models'),
  "seeders-path": path.resolve('./seeders'),
  "migration-path": path.resolve('./migrations'),
}


working well in vscode terminal and pi terminal
make a connection between the ExpressJS server and PostgreSQL - use ORM -sequelize
 moduel

 Notice that we are making use of path module from Node's core API in this 
 process. The path.resolve() method resolves a sequence of paths or path 
 segments into an absolute path. If no path segments are passed, path.resolve() will 
 return the absolute path of the current working directory and in our case, 
 the current working directory is going to be the root of our project.

 Todo and TodoItem are going to have one-to-many-relationship. This done by associating 
 both the models and define a custom class method. Let us modify both the model files to 
 add this and some modification in each attribute for things to work our way. Open todo.js file.

Running the Migrations
Migrations provide a clearer picture of what our database models going to look like inside. Since you are making changes in the generated attributes and adding fields like in our case, defaultValue, you have to edit the migration files for each specific model wherever necessary.
Running migrations take care of creating the database table and associated column inside the table for us. This is the functionality of each up function in both migrations files. There is also a down function that is only to run when you need to undo the changes inside the database table for some 